#!/usr/bin/bash
#------------------------

#------------------------Bash-Colors
# Normal
    CLEAR='\033[0m'       # Text Reset
    # Regular Colors
    Black='\033[0;30m'        # Black
    Red='\033[0;31m'          # Red
    Green='\033[0;32m'        # Green
    Yellow='\033[0;33m'       # Yellow
    Blue='\033[0;34m'         # Blue
    Purple='\033[0;35m'       # Purple
    Cyan='\033[0;36m'         # Cyan
    White='\033[0;37m'        # White

# Bold
    BBlack='\033[1;30m'       # Black
    BRed='\033[1;31m'         # Red
    BGreen='\033[1;32m'       # Green
    BYellow='\033[1;33m'      # Yellow
    BBlue='\033[1;34m'        # Blue
    BPurple='\033[1;35m'      # Purple
    BCyan='\033[1;36m'        # Cyan
    BWhite='\033[1;37m'       # White
#
log(){
    echo -e `jdate +%Y/%m/%d-%H:%M:%S 2> /dev/null || date +%Y/%m/%d-%H:%M:%S `"  ===>  ""${BGreen}" $1 "${CLEAR}" | tee -a $LOGFILE
 }
printError(){
    echo -e `jdate +%Y/%m/%d-%H:%M:%S 2> /dev/null || date +%Y/%m/%d-%H:%M:%S `"  ===>  ""${BRed}" $1 "${CLEAR}" | tee -a $LOGFILE
 }
check_rootrun(){
    if [ "$EUID" -ne 0 ]
        then printError "Please run as root"
        exit
    fi
 }
check_fedora(){
    if [ `cat /etc/os-release | grep -ic fedora` -lt 1 ]
        then printError "This is designed for Fedora Linux distribution only. "
        exit
    fi
 }
check_gui(){
    IS_GUI=0
    gui1=`hostnamectl | grep -ic "Workstation Edition"`
    gui2=`systemctl status graphical.target | grep -ci "loaded\|active"`
    let "edition=$gui1+$gui2"
    if [ $edition -lt 3 ]
        then printError "This is designed for Fedora Linux distribution only. "
        exit
    fi
    IS_GUI=1
 }
check_dnfrpm(){
    let "dnfrpm=`which dnf | grep dnf -c`+`which rpm | grep rpm -c`"
     if [ "$dnfrpm" -lt 2 ]
        then printError "This is designed for Fedora Linux distribution only. "
        exit
    fi   
 }
check_net(){
    check_ping1=`ping -i 0.2 -W 0.5 -O 8.8.8.8 -c 10 `
    pingtest1=`echo "$check_ping1 " | grep -c "bytes from"`
    check_ping2=`ping -i 0.2 -W 0.5 -O google.com -c 10 `
    pingtest2=`echo "$check_ping2 " | grep -c "bytes from"`
    let "ping_res = $pingtest1 + $pingtest1"

    if [ $ping_res -lt 10 ]
        then printError "This script needs internet your internet quality is less than expected, exiting "
        exit
    fi 
    if [ $ping_res -lt 15 ]
        then printError "This script needs internet your internet quality is not good. "
    fi 
    
 }